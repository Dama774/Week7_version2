@startuml mydiagram
left to right direction
skinparam ClassAttributeIconSize 0

abstract class User {
  -name: string
  -userID: string
  +{abstract} placeOrder(order: Order)
  +{abstract} processOrder(order: Order)
}

class Employee extends User {
  +placeOrder(order: Order)
  +processPayment(order: Order)
  +shipOrder(order: Order)
}

class Customer extends User {
  +placeOrder(order: Order)
  +makePayment(order: Order)
}

interface OrderProcessor {
  +processOrder(order: Order)
  +cancelOrder(order: Order)
}

class Client implements OrderProcessor {
  +placeOrder(order: Order)
  +makePayment(order: Order)
  +processOrder(order: Order)
  +cancelOrder(order: Order)
  -clientID: string
}

class Item {
  -name: string
  -price: double
  -quantity: int
}

class Order {
  +getOrderID(): string
  +getItems(): vector<Item>
  +getTotalCost(): double
  +setDelivery(delivery: Delivery)
  -orderID: string
  -items: vector<Item>
  -delivery: Delivery
}

class Delivery {
  +getDeliveryMethod(): string
  +getDeliveryAddress(): string
  +setPickupPoint(pickupPoint: PickupPoint)
  -deliveryID: string
  -deliveryMethod: string
  -deliveryCost: double
  -deliveryAddress: string
  -pickupPoint: PickupPoint
}

class PickupPoint {
  +getAddress(): string
  +getPhoneNumber(): string
  -pickupPointID: string
  -address: string
  -phoneNumber: string
}

class Application {
  -frontend: Frontend
  -backend: Backend
  +run()
  +initialize()
  +shutdown()
}

class Frontend {
  +mainMenu()
  +displayUserInterface()
  +handleUserInput()
  +updateView()
  +renderComponent(componentName: string)
}

class Backend {
  -database: Database
  +calculateTotal(order: Order): double
}

class Database {
  -inventory: List<Item>
  
  +addItem(item: Item)
  +removeItem(itemName: string)
  +updateItemQuantity(itemName: string, quantity: int)
  
  +findItemByName(name: string): Item
  +findItemsByCategory(category: string): List<Item>
  
  +checkItemAvailability(itemName: string): boolean
  +getInventoryValue(): double
  +getLowStockItems(threshold: int): List<Item>
}

class PriceChangeLog {
  -itemID: string
  -oldPrice: double
  -newPrice: double
  -changeDate: date
  +logPriceChange(item: Item, oldPrice: double, newPrice: double)
  +getPriceHistory(itemID: string): List<PriceChange>
  +generatePriceChangeReport()
}

Employee "1" -- "0..*" Order
Customer "1" -- "1..*" Order
Order "1" -- "0..*" Item
Order "1" -- "1" Delivery 
Delivery "1" -- "1" PickupPoint
Client "1" -- "0..*" Order
Application "1" o.. "1" Frontend
Application "1" o.. "1" Backend
Frontend "1" .. "1" Backend
Backend "1" .. "1" Database
Item "1" -- "0..*" PriceChangeLog
Database "1" -- "0..*" Item

@enduml